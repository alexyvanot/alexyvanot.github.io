const x=t=>t;function h(t){const o=t-1;return o*o*o+1}function f(t){const o=typeof t=="string"&&t.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);return o?[parseFloat(o[1]),o[2]||"px"]:[t,"px"]}function b(t,{delay:o=0,duration:i=400,easing:c=x}={}){const e=+getComputedStyle(t).opacity;return{delay:o,duration:i,easing:c,css:r=>`opacity: ${r*e}`}}function v(t,{delay:o=0,duration:i=400,easing:c=h,x:e=0,y:r=0,opacity:l=0}={}){const p=getComputedStyle(t),d=+p.opacity,n=p.transform==="none"?"":p.transform,s=d*(1-l),[_,y]=f(e),[u,g]=f(r);return{delay:o,duration:i,easing:c,css:($,m)=>`
			transform: ${n} translate(${(1-$)*_}${y}, ${(1-$)*u}${g});
			opacity: ${d-s*m}`}}function F(t,{delay:o=0,duration:i=400,easing:c=h,axis:e="y"}={}){const r=getComputedStyle(t),l=+r.opacity,p=e==="y"?"height":"width",d=parseFloat(r[p]),n=e==="y"?["top","bottom"]:["left","right"],s=n.map(a=>`${a[0].toUpperCase()}${a.slice(1)}`),_=parseFloat(r[`padding${s[0]}`]),y=parseFloat(r[`padding${s[1]}`]),u=parseFloat(r[`margin${s[0]}`]),g=parseFloat(r[`margin${s[1]}`]),$=parseFloat(r[`border${s[0]}Width`]),m=parseFloat(r[`border${s[1]}Width`]);return{delay:o,duration:i,easing:c,css:a=>`overflow: hidden;opacity: ${Math.min(a*20,1)*l};${p}: ${a*d}px;padding-${n[0]}: ${a*_}px;padding-${n[1]}: ${a*y}px;margin-${n[0]}: ${a*u}px;margin-${n[1]}: ${a*g}px;border-${n[0]}-width: ${a*$}px;border-${n[1]}-width: ${a*m}px;`}}export{v as a,b as f,F as s};
